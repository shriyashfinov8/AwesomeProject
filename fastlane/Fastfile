
default_platform(:android)

before_all do
    ensure_git_status_clean = false # Ensure no uncommitted changes
    git_pull                 # Pull the latest changes from the remote repository
end

platform :android do
    desc "Build and Upload AAB for Internal Testing with optional environment-provided version name"
    lane :release_to_play_store do
      # Change directory to the repository root
      Dir.chdir("..") do
        # Debugging: Print the current working directory
        sh "echo 'Current directory:'"
        sh "pwd"
  
        # Debugging: List files in the android/app directory
        sh "echo 'Listing files in ..:'"
        sh "ls -la ./"
  
        # Debugging: List files in the android/app directory
        sh "echo 'Listing files in android/app:'"
        sh "ls -la ./android/app"
  
        # Fetch the version name from the environment (if provided)
        version_name = ENV['VERSION_NUMBER']
        environment = ENV['ENVIRONMENT']

        puts "Version number: #{version_name}"
        puts "Environment: #{environment}"
  
        # Manually increment the version code in build.gradle
        increment_version_code_in_gradle(gradle_file_path: './android/app/build.gradle')
  
        # Update the version name in build.gradle only if VERSION_NAME is set
        if version_name
          update_version_name_in_gradle(version_name: version_name)
        else
          UI.message("version_number not provided, reusing the existing versionName in build.gradle")
          version_name = get_version_name_from_gradle(gradle_file_path: './android/app/build.gradle')  # Use the existing version name
        end
      
        
        sh "git status"
        
        sh "git add ./android/app/build.gradle"

        sh "git config user.email 'shriyash@finov8.io'"
        sh "git config user.name 'shriyashfinov8'"

        sh "git commit -m 'Bump version code and name to #{version_name}'"
  
        # Push the commit to the remote repository
        sh "git push -u origin main"

        sh "ls -la android"
  
        # Build the AAB
        gradle(task: 'bundle', build_type: 'Release', project_dir: './android/')

        sh "ls -la ./android/app/build/outputs/bundle/release"
  
        # Upload the AAB to Google Play internal track
        # upload_to_play_store(
        #   track: 'internal',  # Always upload to internal track
        #   aab: './android/app/build/outputs/bundle/release/app-release.aab',  # Path to the built AAB
        #   release_status: 'completed',  # Mark the release as completed
        #   release_notes: {
        #     'en-US' => "Release #{version_name}, Build #{get_version_code(app_project_dir: './android/app')}"
        #   }
        # )
      end
    end
  
    # This lane manually increments the versionCode in the build.gradle file
    private_lane :increment_version_code_in_gradle do |options|
      gradle_file_path = options[:gradle_file_path]
  
      # Use sed to increment the versionCode in build.gradle (compatible with Linux)
      sh "sed -i -E 's/versionCode ([0-9]+)/versionCode $((\\1 + 1))/' #{gradle_file_path}"
  
      UI.message("Successfully incremented versionCode in #{gradle_file_path}")
    end
  
    # This method updates the version name in build.gradle if provided
    private_lane :update_version_name_in_gradle do |options|
      version_name = options[:version_name]
      gradle_file_path = "./android/app/build.gradle"
      
      # Update the version name in the build.gradle file
      sh "sed -i 's/versionName \".*\"/versionName \"#{version_name}\"/' #{gradle_file_path}"
      UI.message("Updated versionName in build.gradle to #{version_name}")
    end
  
    def get_version_name_from_gradle(gradle_file_path:)
      version_name = ''
      File.open(gradle_file_path, 'r') do |file|
        file.each_line do |line|
          if line.include?("versionName")
            version_name = line.match(/versionName\s+\"(.+?)\"/)[1]
            break
          end
        end
      end
      return version_name
    end
  end
  
